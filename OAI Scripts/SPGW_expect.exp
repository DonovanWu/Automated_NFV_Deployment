#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Nov 14 23:39:31 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}



set timeout -1
spawn ./build_spgw -i
match_max 100000

#expect -exact "Do you want to continue? \[Y/n\] "
#send -- "y\r"
#expect -exact "Do you want to continue? \[Y/n\] "
#send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "<No>"
send -- "\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to continue? \[Y/n\] "
send -- "y\r"
expect -exact "Do you want to install libgtpnl ? <y/N> "
send -- "y\r"
expect eof
